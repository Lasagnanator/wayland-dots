;; EWW, KRAKEN'S BILE ;;


;; IMPORTS ;;

(include "yuck/variables.yuck")
(include "yuck/bar.yuck")
(include "yuck/dashboard.yuck")


;; WINDOWS ;;

(defwindow  bar0
            :monitor 0
            :stacking "bottom"
            :exclusive true
            ;; :focusable false
            :geometry (geometry :width "100%"
                                :height "4%"
                                :anchor "top center")
            (bar_layout :monitor 0))

(defwindow  bar1
            :monitor 1
            :stacking "bottom"
            :exclusive true
            :focusable false
            :geometry (geometry :width "100%"
                                :height "4%"
                                :anchor "top center")
            (bar_layout :monitor 1))

(defwindow  bar2
            :monitor 2
            :stacking "bottom"
            :exclusive true
            :focusable false
            :geometry (geometry :width "100%"
                                :height "4%"
                                :anchor "top center")
            (bar_layout :monitor 2))

(defwindow dashboard
            :monitor 0
            :stacking "overlay"
            :focusable true
            :geometry (geometry :width "100%"
                                :height "100%"
                               :anchor "bottom center")
                               ;; :anchor "top center")
            (dashboard_layout))

(defwindow notification_center
           :monitor 0
           :stacking "overlay"
           :focusable false
           :geometry (geometry :width "20%"
                               :height "100%"
                               :anchor "top right")
           (notifications))

;; BAR LAYOUTS ;;

(defwidget bar_layout [monitor]
  (centerbox :class "layout-box"
             :orientation "horizontal"
             (left)
             (center :monitor monitor)
             (right)))

(defwidget left []
  (box :class "left-widgets"
       :orientation "horizontal"
       :space-evenly false
       :halign "start"
       (dashboard_button)
       (current_window)))

(defwidget center [monitor]
  (box :class "center-widgets"
       :orientation "horizontal"
       (workspaces :monitor monitor)))

(defwidget right []
  (box :class "right-widgets"
       :orientation "horizontal"
       :space-evenly false
       :halign "end"
       (volume)
       (brightness)
       ;; (ram)
       ;; (cpu)
       ;; (temp)
       (batteries)
       (time)))


;; DASHBOARD LAYOUTS ;;

(defwidget dashboard_layout []
  (box :class "dashboard_main"
       :space-evenly false
       :halign "center"
       :valign "center"
       (left_column)
       (center_column)
       (right_column)))
       ;; (power_cluster)))

(defwidget left_column []
  (box :orientation "vertical"
       :valign "center"
       :space-evenly false
       (profile)
       (box 
         (updates)
         (bluetooth))))

(defwidget center_column []
  (box :orientation "vertical"
       :valign "center"
       :space-evenly false
       (box :orientation "vertical"
         (rectangular_tile_horizontal :text "Batteries?")
         (network))
       (weather)))

(defwidget right_column []
  (box :orientation "vertical"
       :valign "center"
       (datetime)
       (info_cluster)))

(defwidget info_cluster []
  (box :orientation "vertical"
    (box
      (dash_meter :icon "󰍛" ; CPU
         :value "${sysinfo.cpu}"
         :unit "%")
      (dash_meter :icon "󰏈" ; TEMP
                  :value "${sysinfo.temp}"
                  :unit "°C"))
    (box
      (dash_meter :icon "󰘚" ; RAM
                  :value "${sysinfo.mem}"
                  :unit "%")
      (dash_meter :icon "󰋊" ; DISK
                  :value "${sysinfo.disk}"
                  :unit "%"))))

(defwidget power_cluster []
  (box :orientation "vertical"
       :valign "center"
       (dash_button :icon "󰐥" ; SHUTDOWN
                    :action "shutdown now")
       (dash_button :icon "󰜉" ; REBOOT
                    :action "reboot")
       (dash_button :icon "󰌾" ; LOCK
                    :action "notify-send Bruh")
       (dash_button :icon "󰤄" ; SLEEP
                    :action "notify-send Bruh")))



;; NOTIFICATION CENTER
(defwidget notifications []
  (scroll :hscroll false
          :vscroll true
          (notifications_list)))
               

;; TEST ;;

(defwidget json_widget []
  (eventbox :onclick "echo ${EWW_TEMPS} > scripts/eww_temps"
    (box :space-evenly true
      (label :text "Dump temps"))))
      ;; (label :text "${EWW_TEMPS.thinkpad_cpu}"))))

