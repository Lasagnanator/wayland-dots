#!/usr/bin/env python

from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler

class WatchFile(FileSystemEventHandler):

    def __init__(self, path: str, filename: str, callback: 'function') -> None:
        self.filename = filename
        self.callback = callback
        self.observer = Observer()
        self.observer.schedule(self, path, recursive=False)
        self.observer.start()
        self.observer.join()
    
    def on_modified(self, event):
        if not event.is_directory and event.src_path.endswith(self.filename):
            self.callback()

with open('/sys/class/backlight/intel_backlight/max_brightness', 'r') as f:
    max_brightness = f.read().strip('\n')

if __name__ == '__main__':
    def callback() -> None:
        with open('/sys/class/backlight/intel_backlight/brightness', 'r') as f:
            raw_brightness = f.read().strip('\n')
        brightness = int(round(((int(raw_brightness) / int(max_brightness)) * 100), 0))
        print(brightness, flush=True)

    callback()
    WatchFile('/sys/class/backlight/intel_backlight/', 'brightness', callback)
