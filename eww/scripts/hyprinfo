#!/usr/bin/env python

import socket
import os
import re
import subprocess
import json
from dataclasses import dataclass
from typing import List

@dataclass
class Monitor:
    id: int
    name: str
    active_workspace: int
    
@dataclass
class Workspace:
    id: int
    windows: int

@dataclass
class Window:
    classname: str
    title: str


@dataclass
class Hyprinfo:
    monitors: List[Monitor]
    workspaces: List[Workspace]
    window: Window

    def toJSON(self):
        json: dict = {
            'monitors': [ x.__dict__ for x in self.monitors ],
            'workspaces': [ x.__dict__ for x in self.workspaces ],
            'window': self.window.__dict__
        }
        return json


def class_filter(name: str) -> str:
    if bool(re.search('wezterm', name)):
        window_name = 'terminal'
    elif bool(re.search('moonlight', name)):
        window_name = 'moonlight'
    else:
        window_name = name
    return window_name


def hyprland_status():
    hyprinfo: Hyprinfo = Hyprinfo(
        monitors = [],
        workspaces = [],
        window = None
    )
    raw_data = json.loads(subprocess.run(['hyprctl', 'monitors', '-j'], capture_output=True).stdout)
    for i in range(0, 4):
        monitor = [x for x in raw_data if x['id'] == i]
        hyprinfo.monitors.append(Monitor(
            id = i,
            name = monitor[0]['name'] if monitor else 'disconnected',
            active_workspace = int(monitor[0]['activeWorkspace']['id']) if monitor else 1
        ))
    raw_data = json.loads(subprocess.run(['hyprctl', 'workspaces', '-j'], capture_output=True).stdout)
    for i in range(1, 10):
        workspace = [x for x in raw_data if x['id'] == i]
        hyprinfo.workspaces.append(Workspace(
             id = i,
             windows = int(workspace[0]['windows']) if workspace else 0
         ))
    raw_data = json.loads(subprocess.run(['hyprctl', 'activewindow', '-j'], capture_output=True).stdout)
    hyprinfo.window = Window(
        classname = class_filter(raw_data['class']).capitalize() if raw_data else 'Null',
        title = raw_data['title'] if raw_data else 'Null'
    )
    print(json.dumps(hyprinfo.toJSON()), flush=True)


if __name__ == '__main__':
    hyprland_status()
    with socket.socket(socket.AF_UNIX, socket.SOCK_STREAM) as sock:
        sock.connect(f'/tmp/hypr/{os.environ.get("HYPRLAND_INSTANCE_SIGNATURE")}/.socket2.sock')
        while True:
            output = sock.recv(4096).decode('utf-8')
            if output.split('\n')[0][0:14] == 'activewindow>>' or output.split('\n')[0][0:11] == 'workspace>>' or output.split('\n')[0][0:12] == 'focusedmon>>':
                hyprland_status()
